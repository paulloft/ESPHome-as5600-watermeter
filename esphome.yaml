substitutions:
  device_name: "watermeter"
  friendly_name: Watermeter
  device_description: Watermeter
  prefix: watermeter
  overrange: '1000'
  rate: '0.001'

esphome:
  name: '${device_name}'
  friendly_name: '${friendly_name}'
  comment: '${device_description}'

esp8266:
  board: d1_mini

captive_portal:
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${friendly_name} Hotspot'
    password: !secret wifi_captive_password

globals:
  - id: hot_pulses
    type: int
    restore_value: no
    initial_value: '0'
  - id: hot_total
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: cold_pulses
    type: int
    restore_value: no
    initial_value: '0'
  - id: cold_total
    type: float
    restore_value: no
    initial_value: '0.0'

i2c:
  id: i2c0

tca9548a:
  - address: 0x70
    id: multiplex0
    i2c_id: i2c0
    channels:
      - bus_id: mpc1
        channel: 1
      - bus_id: mpc2
        channel: 2

as5600:
  - id: wmh_hot
    i2c_id: mpc1

  - id: wmh_cold
    i2c_id: mpc2

sensor:
  - platform: as5600
    as5600_id: wmh_hot
    update_interval: 1s
    id: '${prefix}_hot_total'
    name: "Hot water total consumption"
    unit_of_measurement: "m³"
    device_class: water
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:water"
    filters:
      - lambda: !lambda |-
          if ( id(hot_pulses) - x > ${overrange}) {
            id(hot_pulses) = 0;
            id(hot_total) += ${rate} * 10;
          }
          if ( x < id(hot_pulses) ) {
            return {};
          } else {
            id(hot_pulses) = x;
            return id(hot_total) + ((${rate} * 10) / 4096) * x;
          }
  
  - platform: as5600
    as5600_id: wmh_cold
    update_interval: 1s
    id: '${prefix}_cold_total'
    name: "Cold water total consumption"
    unit_of_measurement: "m³"
    device_class: water
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:water"
    filters:
      - lambda: !lambda |-
          if ( id(cold_pulses) - x > ${overrange}) {
            id(cold_pulses) = 0;
            id(cold_total) += ${rate} * 10;
          }
          if ( x < id(cold_pulses) ) {
            return {};
          } else {
            id(cold_pulses) = x;
            return id(cold_total) + ((${rate} * 10) / 4096) * x;
          }

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: '${prefix}_wifi_signal_db'
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: '${prefix}_wifi_signal_db'
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
